// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rray_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// rray_binary_op_cpp
SEXP rray_binary_op_cpp(const std::string& op, SEXP x, SEXP y);
RcppExport SEXP _rray_rray_binary_op_cpp(SEXP opSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type op(opSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rray_binary_op_cpp(op, x, y));
    return rcpp_result_gen;
END_RCPP
}
// rray_broadcast_cpp
SEXP rray_broadcast_cpp(SEXP x, rray::dim_t dim);
RcppExport SEXP _rray_rray_broadcast_cpp(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< rray::dim_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(rray_broadcast_cpp(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// rray_unary_op_cpp
SEXP rray_unary_op_cpp(std::string op, SEXP x);
RcppExport SEXP _rray_rray_unary_op_cpp(SEXP opSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rray_unary_op_cpp(op, x));
    return rcpp_result_gen;
END_RCPP
}
// rray_custom_reducer_cpp
SEXP rray_custom_reducer_cpp(SEXP x, Rcpp::Function f, rray::axes_t axes, SEXP type_);
RcppExport SEXP _rray_rray_custom_reducer_cpp(SEXP xSEXP, SEXP fSEXP, SEXP axesSEXP, SEXP type_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< rray::axes_t >::type axes(axesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type type_(type_SEXP);
    rcpp_result_gen = Rcpp::wrap(rray_custom_reducer_cpp(x, f, axes, type_));
    return rcpp_result_gen;
END_RCPP
}
// rray_reducer_cpp
SEXP rray_reducer_cpp(std::string op, SEXP x, rray::axes_t axes);
RcppExport SEXP _rray_rray_reducer_cpp(SEXP opSEXP, SEXP xSEXP, SEXP axesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type op(opSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< rray::axes_t >::type axes(axesSEXP);
    rcpp_result_gen = Rcpp::wrap(rray_reducer_cpp(op, x, axes));
    return rcpp_result_gen;
END_RCPP
}
// rray_reshape_cpp
SEXP rray_reshape_cpp(SEXP x, rray::dim_t dim);
RcppExport SEXP _rray_rray_reshape_cpp(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< rray::dim_t >::type dim(dimSEXP);
    rcpp_result_gen = Rcpp::wrap(rray_reshape_cpp(x, dim));
    return rcpp_result_gen;
END_RCPP
}
// rray_squish_cpp
void rray_squish_cpp(const xt::rarray<double>& x, std::vector<std::size_t> dim);
RcppExport SEXP _rray_rray_squish_cpp(SEXP xSEXP, SEXP dimSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const xt::rarray<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type dim(dimSEXP);
    rray_squish_cpp(x, dim);
    return R_NilValue;
END_RCPP
}
// rray_concatenate_cpp
xt::rarray<double> rray_concatenate_cpp(const xt::rarray<double>& x, const xt::rarray<double>& y, std::size_t axis);
RcppExport SEXP _rray_rray_concatenate_cpp(SEXP xSEXP, SEXP ySEXP, SEXP axisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const xt::rarray<double>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const xt::rarray<double>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::size_t >::type axis(axisSEXP);
    rcpp_result_gen = Rcpp::wrap(rray_concatenate_cpp(x, y, axis));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rray_rray_binary_op_cpp", (DL_FUNC) &_rray_rray_binary_op_cpp, 3},
    {"_rray_rray_broadcast_cpp", (DL_FUNC) &_rray_rray_broadcast_cpp, 2},
    {"_rray_rray_unary_op_cpp", (DL_FUNC) &_rray_rray_unary_op_cpp, 2},
    {"_rray_rray_custom_reducer_cpp", (DL_FUNC) &_rray_rray_custom_reducer_cpp, 4},
    {"_rray_rray_reducer_cpp", (DL_FUNC) &_rray_rray_reducer_cpp, 3},
    {"_rray_rray_reshape_cpp", (DL_FUNC) &_rray_rray_reshape_cpp, 2},
    {"_rray_rray_squish_cpp", (DL_FUNC) &_rray_rray_squish_cpp, 2},
    {"_rray_rray_concatenate_cpp", (DL_FUNC) &_rray_rray_concatenate_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_rray(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
