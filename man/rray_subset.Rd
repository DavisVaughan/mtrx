% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/subset.R
\name{rray_subset}
\alias{rray_subset}
\alias{[.vctrs_rray}
\title{Subset an array}
\usage{
rray_subset(x, ...)

\method{[}{vctrs_rray}(x, ..., drop = FALSE)
}
\arguments{
\item{x}{An rray.}

\item{...}{A specification of indices to extract.
\itemize{
\item Integer-ish indices extract specific elements of dimensions.
\item Logical indices must be length 1, or the length of the dimension you are
subsetting over.
\item Character indices are only allowed if \code{x} has names for the corresponding
dimension.
\item \code{NULL} is treated as \code{0}.
}}

\item{drop}{Ignored, but preserved for better error messages with code
that might have used arrays before.}
}
\description{
\code{rray_subset()} powers \code{[} for rray objects. Notably, it \emph{never} drops
dimensions, and ignores trailing commas. It can also be used with base R
matrices and arrays to get rray subsetting behavior with them.
}
\examples{
x <- rray(1:8, c(2, 2, 2))

# `rray_subset()` powers `[` so these are identical
rray_subset(x, 1)
x[1]

# Trailing dots are ignored, so these are identical
x[1]
x[1,]

# Missing arguments are treated as selecting the
# entire dimension, consistent with base R.
# This selects all of the rows, and the first column.
x[,1]

# Notice that you can't actually do the above with base
# R. It requires you to fully specify the dimensions of `x`.
# This would throw an error.
x_arr <- as_array(x)
\dontrun{
x_arr[,1]
}

# To get the same behavior, you have to do:
x_arr[, 1, , drop = FALSE]

# Note that you can use base R arrays with `rray_subset()`
rray_subset(x_arr, , 1)

}
