% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reducers-custom.R
\name{reducers}
\alias{reducers}
\alias{rray_reduce_dbl}
\alias{rray_reduce_int}
\alias{rray_reduce_lgl}
\title{Reducers}
\usage{
rray_reduce_dbl(.x, .f, ..., axes = 1)

rray_reduce_int(.x, .f, ..., axes = 1)

rray_reduce_lgl(.x, .f, ..., axes = 1)
}
\arguments{
\item{.x}{An array-like object.}

\item{.f}{A 2-argument function. The function will be passed the accumulated
value as the first argument and the "next" value as the second argument. It
will be applied in this manner along each of the \code{axes}.}

\item{...}{Additional arguments passed to \code{.f}.}

\item{axes}{The axes to reduce over.}
}
\description{
Apply a generic reducing function to the axes of \code{.x}. Reducing functions
return a single value by iteratively applying a binary function. For example,
\code{\link[=rray_sum]{rray_sum()}} is a reducing function that returns the sum along a specified
axis.
}
\examples{

x <- rray(1:24, c(12, 2))

# Equivalent
rray_reduce_int(x, sum)
rray_reduce_int(x, ~.x + .y)
rray_sum(x)

# Same as above, but reduce the columns
rray_reduce_int(x, sum, axes = 2)
rray_reduce_int(x, ~.x + .y, axes = 2)
rray_sum(x, axes = 2)

# Running max of each column
x_shuffled <- x[c(1:5, 10:6, 12, 11),]
rray_reduce_int(x_shuffled, max)

# Passing named arguments through
y <- x
y[1,1] <- NA
rray_reduce_int(y, sum, na.rm = TRUE)
rray_reduce_int(y, ~sum(.x, .y, na.rm = TRUE))

}
