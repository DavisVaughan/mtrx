% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inner-type.R
\name{vec_ptype_inner}
\alias{vec_ptype_inner}
\alias{vec_ptype_inner_common}
\title{Find the inner type of a set of vectors}
\usage{
vec_ptype_inner(x)

vec_ptype_inner_common(..., .ptype = NULL)
}
\arguments{
\item{x}{A vector.}

\item{...}{Vectors to determine the common inner type of.}

\item{.ptype}{If not \code{NULL}, this overrides the common inner type of \code{...}.}
}
\description{
\code{vec_ptype_inner()} finds the inner type of a single vector.
\code{vec_ptype_inner_common()} finds the common inner type of multiple
vectors.
}
\details{
The inner type is a 0-size, 0-shape prototype that represents the
"inner" type of \code{x}. The return value is essentially the
object form of \code{typeof()}.

For complex types, a method should be written that returns an
empty inner type of that input with no shape or size. If that complex type
can have multiple inner types, the method should be written so that it
returns the correct inner type of the current input. The return value
should \emph{not} have the class of the classed input.

The common inner type is useful alongside \code{\link[=vec_cast_inner]{vec_cast_inner()}}.
For example, \code{rray_bind()} uses \code{vec_ptype_inner_common()}
to determine the common inner type, and then uses
\code{vec_cast_inner()} to cast each of the inputs to the same inner
type before binding them together.
}
\examples{
# The inner type of base R atomics uses their constructor
# vec_ptype_inner(1)

# The inner type of an rray is an empty base R object
# vec_ptype_inner(rray(1))

# Find the common inner type of multiple inputs
# (the double type wins, the container types are disregarded)
# vec_ptype_inner_common(1, TRUE, rray(1L))

}
\keyword{internal}
