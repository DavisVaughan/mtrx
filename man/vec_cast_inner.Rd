% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inner-cast.R
\name{vec_cast_inner}
\alias{vec_cast_inner}
\alias{vec_cast_inner.logical}
\alias{vec_cast_inner.integer}
\alias{vec_cast_inner.double}
\alias{vec_cast_inner.vctrs_rray_lgl}
\alias{vec_cast_inner.vctrs_rray_dbl}
\alias{vec_cast_inner.vctrs_rray_int}
\title{Cast to a inner type}
\usage{
vec_cast_inner(x, to)

\method{vec_cast_inner}{logical}(x, to)

\method{vec_cast_inner}{integer}(x, to)

\method{vec_cast_inner}{double}(x, to)

\method{vec_cast_inner}{vctrs_rray_lgl}(x, to)

\method{vec_cast_inner}{vctrs_rray_dbl}(x, to)

\method{vec_cast_inner}{vctrs_rray_int}(x, to)
}
\arguments{
\item{x}{Vector to cast.}

\item{to}{Object with the inner type to cast to.}
}
\description{
\code{vec_cast_inner()} casts \code{x} to the \code{typeof()} \code{to}. It makes no guarantees
about the attributes of \code{x} (with the exception of the \code{dim}), only that
the inner type will be the same after the cast. This function is usually
called internally by other functions that do the restoration of attributes.

As opposed to \code{vec_cast()}, the \emph{shape} of \code{x} is maintained.
}
\examples{

# Upcasting to an rray. Still a logical
vec_cast_inner(TRUE, rray(1))

# Downcasting to a double, no longer an rray
vec_cast_inner(rray(1), TRUE)

# Shape of `x` is kept
vec_cast_inner(matrix(1:5), rray(1))

# Dim names of `x` are kept
x <- rray(1:2, dim_names = list(c("r1", "r2")))
vec_cast_inner(x, 1)

}
