% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logical.R
\name{rray-logical}
\alias{rray-logical}
\alias{&.vctrs_rray}
\alias{rray_logical_and}
\alias{|.vctrs_rray}
\alias{rray_logical_or}
\alias{!.vctrs_rray}
\alias{rray_logical_not}
\alias{any.vctrs_rray}
\alias{rray_any}
\title{Logical operators}
\usage{
\method{&}{vctrs_rray}(e1, e2)

rray_logical_and(x, y)

\method{|}{vctrs_rray}(e1, e2)

rray_logical_or(x, y)

\method{!}{vctrs_rray}(x)

rray_logical_not(x)

\method{any}{vctrs_rray}(..., na.rm = FALSE)

rray_any(x, axes = NULL)
}
\arguments{
\item{e1, e2}{Generally, the same as \code{x} and \code{y}. See Details.}

\item{x, y}{Two vectors, matrices, arrays, or rrays.}

\item{...}{A single rray. An error is currently thrown if more than one
input is passed here.}

\item{na.rm}{Should \code{NA} values be removed? Currently only \code{FALSE} is
allowed.}

\item{axes}{An integer vector specifying the axes to reduce over.
\code{1} reduces the number of rows to \code{1}, performing the reduction along the
way. \code{2} does the same, but with the columns, and so on for higher
dimensions. The default reduces along all axes.}
}
\description{
These operators perform logical operations on arrays, with broadcasting. The
underlying functions powering the logical operations are also exported
for use with base R objects.
}
\details{
The operators themselves rely on R's dispatching rules to
dispatch to the correct rray logical operator. When comparing rrays with
base R matrices and arrays, this generally works fine. However, if you
compare classed objects like \code{factor("x") & rray(1)} then a fall through
error is thrown. There is nothing we can do about
this. See \code{?groupGeneric} for more information on this.

The behavior of comparing either an array with a length 0 dimension
or \code{NULL} with another array is slightly different than base R since
broadcasting behavior is well defined. If any dimension has length 0, the
result of the logical operation is an empty logical with the common dimension
of \code{x} and \code{y}. See the examples section for a few demonstrations.
}
\examples{
x <- rray(TRUE, c(2, 2, 3))
y <- matrix(c(TRUE, FALSE))

# `TRUE` wherever `y` is broadcasted to be `TRUE`
x & y

# ---------------------------------------------------------------------------
# Behavior with edge cases

x <- rray(TRUE, c(2, 2))

# The common dim is (0, 2)
logical() & x

# You can have empty arrays with shape
# The common dim is (2, 0, 2)
y <- array(logical(), c(2, 0, 2))
x & y

# NULL is treated as logical(0)
NULL & x

rray_logical_and(NULL, NULL)


}
